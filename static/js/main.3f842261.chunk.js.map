{"version":3,"sources":["utils/weather.js","Components/CityCard.js","Components/City.js","Components/AllCities.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","fetchCityWeather","_x","_x2","_fetchCityWeather","apply","this","arguments","_callee","cityId","type","response","json","regenerator_default","a","wrap","_context","prev","next","fetch","concat","mode","cache","sent","abrupt","stop","search","_x3","_search","_callee2","cityname","_context2","CityCard","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","_len","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","state","data","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","mark","props","city","Key","setState","react_default","createElement","className","onClick","removeFavorite","bind","LocalizedName","DailyForecasts","Day","IconPhrase","Temperature","Maximum","Value","Date","toString","slice","Headline","Text","_removeFavorite","removeFromFavorites","React","Component","City","weatherr","fortcast","checked","room","react_switch_default","onChange","handleChange","addToFavorites","addFavorite","AllCities","rooms","_this2","handle","placeholder","name","map","r","Components_City","roomid","ev","defineProperty","target","sendw","App","comp","cities","Components_AllCities","savedCities","CityCard_CityCard","switchComp","renderSearch","renderFavorites","userChoiceComp","toConsumableArray","filter","c","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f842261.chunk.js","sourcesContent":["const API_KEY = \"Ztr9I1kQ2Yy2BIHlLviGqEGmXWlhChir\";\n\nexport async function fetchCityWeather(cityId, type) {\n  const response = await fetch(\n    `http://dataservice.accuweather.com/forecasts/v1/daily/${type}/${cityId}?apikey=${API_KEY}&metric=true`,\n    {\n      mode: \"cors\",\n      cache: \"force-cache\"\n    }\n  );\n  const json = await response.json();\n  return json;\n}\n\nexport async function search(cityname) {\n  const response = await fetch(\n    `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${cityname}`,\n    {\n      mode: \"cors\",\n      cache: \"force-cache\"\n    }\n  );\n  const json = await response.json();\n  return json;\n}\n","import React from \"react\";\nimport { fetchCityWeather } from \"../utils/weather\";\n\nexport class CityCard extends React.Component {\n  state = { data: null };\n\n  async componentDidMount() {\n    const data = await fetchCityWeather(this.props.city.Key, \"5day\");\n    this.setState({ data });\n  }\n\n  render() {\n    const { city } = this.props;\n    const { data } = this.state;\n\n    return (\n      <article className=\"city-card col-sm-3\">\n        <button className=\"remove\" onClick={this.removeFavorite.bind(this)}>\n          X\n        </button>\n\n        <h3>{city.LocalizedName}</h3>\n        {!data && \"loading...\"}\n\n        {data && (\n          <h4>\n            {\" \"}\n            Today is{\" \"}\n            {data.DailyForecasts[0].Day.IconPhrase +\n              \" \" +\n              data.DailyForecasts[0].Temperature.Maximum.Value}\n            &#8451;\n          </h4>\n        )}\n\n        <h5>Here the fortcast for the next days:</h5>\n        {data && (\n          <div className=\"box\">\n            {\" \"}\n            {data.DailyForecasts[1].Date.toString().slice(0, 10) +\n              \" \" +\n              data.DailyForecasts[1].Day.IconPhrase +\n              \".  \" +\n              data.DailyForecasts[1].Temperature.Maximum.Value}\n            &#8451;\n          </div>\n        )}\n        {data && (\n          <div className=\"box\">\n            {\" \"}\n            {data.DailyForecasts[2].Date.toString().slice(0, 10) +\n              \" \" +\n              data.DailyForecasts[2].Day.IconPhrase +\n              \".  \" +\n              data.DailyForecasts[2].Temperature.Maximum.Value}\n            &#8451;\n          </div>\n        )}\n        {data && (\n          <div className=\"box\">\n            {\" \"}\n            {data.DailyForecasts[3].Date.toString().slice(0, 10) +\n              \" \" +\n              data.DailyForecasts[3].Day.IconPhrase +\n              \".  \" +\n              data.DailyForecasts[3].Temperature.Maximum.Value}\n            &#8451;\n          </div>\n        )}\n        {data && (\n          <div className=\"box\">\n            {\" \"}\n            {data.DailyForecasts[4].Date.toString().slice(0, 10) +\n              \" \" +\n              data.DailyForecasts[4].Day.IconPhrase +\n              \".  \" +\n              data.DailyForecasts[4].Temperature.Maximum.Value}\n            &#8451;\n          </div>\n        )}\n\n        {data && <p className=\"text\">{data.Headline.Text}</p>}\n      </article>\n    );\n  }\n\n  async removeFavorite() {\n    this.props.removeFromFavorites(this.props.city);\n  }\n}\n\nexport default CityCard;\n","import React, { Component } from \"react\";\nimport { fetchCityWeather } from \"../utils/weather\";\nimport Switch from \"react-switch\";\n\nclass City extends Component {\n  state = {\n    weatherr: [],\n    fortcast: [],\n    data: null,\n    checked: false\n  };\n\n  async componentDidMount() {\n    const data = await fetchCityWeather(this.props.room.Key, \"1day\");\n    this.setState({ data });\n  }\n\n  render() {\n    const { data } = this.state;\n\n    return (\n      <article className=\"search-card col-sm-3\">\n        city name: <h3> {this.props.room.LocalizedName} </h3>\n        {/* city key: {this.props.room.Key} <br/><br/> */}\n        current weather:\n        {!data && \"loading...\"}\n        {data && (\n          <h4>{data.DailyForecasts[0].Temperature.Maximum.Value}&#8451;</h4>\n        )}\n        {data && <h4> {data.DailyForecasts[0].Day.IconPhrase}</h4>}\n        {data && <p>{data.Headline.Text}</p>}\n        {/* <button onClick={this.addFavorite.bind(this)}>add to favorite</button>  */}\n        <Switch\n          className=\"react-switch\"\n          onChange={this.handleChange.bind(this)}\n          checked={this.state.checked}\n        />\n        <p>\n          {\" \"}\n          {this.state.checked ? (\n            <h6>Added to your favorite</h6>\n          ) : (\n            \"Toggle to save to favorite \"\n          )}{\" \"}\n        </p>\n      </article>\n    );\n  }\n\n  async addFavorite() {\n    let city = this.props.room;\n    this.props.addToFavorites(city);\n  }\n\n  async removeFavorite() {\n    this.props.removeFromFavorites(this.props.room);\n  }\n\n  handleChange(checked) {\n    if (checked === true) {\n      this.addFavorite();\n    } else {\n      this.removeFavorite();\n    }\n    this.setState({ checked });\n  }\n}\n\nexport default City;\n","import React, { Component } from \"react\";\nimport City from \"./City\";\nimport { search } from \"../utils/weather\";\n\nclass AllCities extends Component {\n  state = {\n    rooms: [],\n    cityname: \"\"\n  };\n\n \n\n  render() {\n    return (\n      <div className=\"col-sm-12\">\n        Search city{\" \"}\n        <input\n          onChange={this.handle.bind(this)}\n          placeholder=\"tel aviv\"\n          name=\"cityname\"\n          \n        />\n        <br />\n        {this.state.rooms.map(r => (\n          <City\n            addToFavorites={this.props.addToFavorites.bind(this)}\n            removeFromFavorites={this.props.removeFromFavorites.bind(this)}\n            key={r.roomid}\n            room={r}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  handle(ev) {\n    this.setState({ [ev.target.name]: ev.target.value });\n    this.sendw();\n  }\n\n  async sendw() {\n    if (this.state.cityname) {\n      const rooms = await search(this.state.cityname);\n      this.setState({ rooms: rooms });\n    }\n  }\n}\n\nexport default AllCities;\n","import React, { Component } from \"react\";\nimport { CityCard } from \"./Components/CityCard\";\nimport AllCities from \"./Components/AllCities\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    comp: \"favorite\",\n    cities: []\n  };\n\n  renderSearch() {\n    return (\n      <div className=\"col s3\">\n        <AllCities\n          addToFavorites={this.addToFavorites.bind(this)}\n          removeFromFavorites={this.removeFromFavorites.bind(this)}\n          savedCities={this.state.cities}\n        />\n      </div>\n    );\n  }\n\n  renderFavorites() {\n    const { cities } = this.state;\n\n    return (\n      <div className=\"col s3\">\n        <h2>Saved Cities</h2>\n        {cities.map(city => (\n          <CityCard\n            removeFromFavorites={this.removeFromFavorites.bind(this)}\n            key={city.Key}\n            city={city}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    const { comp } = this.state;\n\n    return (\n      <div className=\"container app\">\n        <div className=\"switch\">\n          <button\n            className=\"btn\"\n            onClick={this.switchComp.bind(this, \"search\")}\n          >\n            Search\n          </button>\n          <button\n            className=\"btn\"\n            onClick={this.switchComp.bind(this, \"favorite\")}\n          >\n            Favorites ({this.state.cities.length})\n          </button>\n        </div>\n        <h1 className=\"logo\">Weather App</h1>\n        {comp === \"search\" && this.renderSearch()}\n        {comp === \"favorite\" && this.renderFavorites()}\n      </div>\n    );\n  }\n\n  switchComp(userChoiceComp) {\n    this.setState({ comp: userChoiceComp });\n  }\n\n  addToFavorites(city) {\n    const cities = [...this.state.cities, city];\n    this.setState({ cities });\n  }\n\n  removeFromFavorites(city) {\n    const cities = this.state.cities.filter(c => c != city);\n    this.setState({ cities });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}